[2016 - 02 - 12]

User Interface Layer (Contoller)
Service Layer (Service) --> [Service가 Contoller와 DAO사이의 작업을 연결해주는 역할.]
Persistance Layer (Data Access Object)

---------------------------------------------------------------------------------------------------------------------------

<jsp:useBean id="boardVO" class="board.model.BoardVO"/>
<jsp:setProperty property="*" name="boardVO"/>

--------> [property에 들어가는 값은 VO 클래스의 get,set 메소드의 이름과 맵핑이 된다.]
--------> [property="title" 이라면 BoardVO 클래스의 getTitle, setTitle 과 맵핑되는것이다.]
--------> [property="*" 이라면 BoardVO 클래스의 모든 get, set 메소드와 맵핑되는것이다.]
--------> [즉, 아래의 코드가 jsp:useBean, jsp:setProperty 두 줄로 해결이 된다.]
	
String title = request.getParameter("title");
String name = request.getParameter("name");
String pwd = request.getParameter("pwd");
String content = request.getParameter("content");

BoardVO boardVO = new BoardVO();
boardVO.setTitle(title);
boardVO.setName(name);
boardVO.setPwd(pwd);
boardVO.setContent(content);

---------------------------------------------------------------------------------------------------------------------------

--------> 코드 작성이나 수정후 제대로 반영되지 않아 오류가 발생하는 경우 : cannot be resolved 등 .. 코드가 정상작성 되었으나 에러가 발생하는 경우
클라이언트에서 문제가 발생했다 판단될 경우 크롬에서는 강력새로고침을 하고,
서버단에서 문제가 발생했다 판단될 경우는 서버 스톱 -> 서버 마우스 우클릭후 Clean Tomcat Work Directory 실행
다음, Project 탭에서 Build Automatically 를 체크후 clean -> 해당 프로젝트 선택후 확인.

---------------------------------------------------------------------------------------------------------------------------

[2016 - 02 - 15] 
 
web.xml 에서 세션의 유효시간을 설정하기.
 
<!-- 사용자의 마지막 연결시간을 기준으로 30분이 지난후 세션 만기 -->
<session-config>
    <session-timeout>30</session-timeout>
</session-config>
 
 
session.setMaxInactiveInterval(10); 과 같이 java코드에서도 세션 유효기간을 설정할 수 있다.
 
 
 
세션 삭제 ---------> session.invalidate() 를 하면, 전체 세션이 제거된다.


쿠키는 생성 시간을 기준으로, maxAge 설정 기간만큼만 살아있는다.


[2016 - 02 - 16 파일 업로드 ]

오렐리 사의 파일 업로드 라이브러리를 사용하는 것으로 한다.
http://servlets.com/cos/ 접속
com.oreilly.servlet 를 클릭.

-------------------------------------------------------------------------------------------------------------------------------------

[2016 - 02 - 18]

[xml 파일의 정의]
xml01.dtd 라는 dtd 타입의 파일을 생성하고 다음과 같이 정의한다.

<?xml version="1.0" encoding="UTF-8"?>
<!ELEMENT bookList (book*)>
<!ELEMENT book (title, (author | writer), price)>
<!ATTLIST 	book
			kind	CDATA 	#REQUIRED
			country	CDATA	#REQUIRED>
<!ELEMENT title (#PCDATA)>
<!ELEMENT author (#PCDATA)>
<!ELEMENT writer (#PCDATA)>
<!ELEMENT price (#PCDATA)>

----> * 는 0개 이상을 의미하며, + 는 1개 이상을 의미한다.
----> 이 dtd 파일은 , 루트 엘리먼트로 bookList가 오며 그안에는 book 태그가 0개 이상 있을수 있음을 나타낸다.
----> 그 book 태그는 title, author 혹은  writer, price 태그가 존재한다.

----> 그리고 다음과 같이 book 태그의 kind와 country라는 어트리뷰트를 정의 하게 할 수 있다.

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE bookList SYSTEM "xml01.dtd">	<!-- dtd 파일을 사용한 xml구조의 정의. 웰 폼(well formed) -->
<bookList> <!-- 루트 태그라고 불림(제일 기본이되는 경로) -->
   <book kind="소설" country="러시아">
      <title>까리마조프가의 형제</title>
      <author>도스토예프스키</author>
      <price>30000</price>   
   </book>
   <book kind="에세이" country="알제리">
      <title>시지프스의 신화</title>
      <author>알베르 카뮈</author>
      <price>20000</price>
   </book>
   <book kind="소설" country="영국">
      <title>푸코의 진자</title>
      <author>움베르토 에코</author>
      <price>10000</price>
   </book>
</bookList>

------------------------------------------------------------------------------------------------------------------------------

[2016 - 02 - 22]

★★  Web2.0		Sementic Web		RIA		+ AJAX 의 개념? ★★
-------> 이 세가지를 묶는 것이 바로 [[[ AJAX(웹에서의 모든 비동기적 통신) ]]] 이다. (XML보다 JSON이 통용된다.)

var f = opener.document.myform;
-------------->> opener.document : 새창을 열게한 곳의 전체 문서를 가져온다. 이러한 객체로, 새창에서 원래창의 문서를 제어할 수 있다.
-------------->> self.close() : 열린 새창, 즉 자기 자신을 의미한다.

AJAX ----->> XMLHttpRequest 객체를 통해 가능하다.
---------->> 여기에는 두가지의 속성이 있는데, readyState와 status 가 그것이다.
---------->> XHR 객체의 메소드 중 open() 메소드가 있는데, open('url', 'GET', true) 와 같이 사용하며,
---------->> 마지막 파라미터를 true로 주면 '비동기' 통신을 하게 된다.
[readyState의 상태별 의미] 
0 : 객체만 생성되고 로드는 되지 않은 상태. (uninitialized)
1 : open 메소드를 통해 load(초기화)된 상태이다.
2 : send()를 통해 XHR 에서 url로 request를 보낸후 2번으로 바뀐다.
3 : 서버에서 데이터를 XHR로 전송하고 데이터를 받는 순간 3번으로 바뀐다.(receiving 상태)
4 : 모든 데이터가 전송 완료 되고 나면 4번으로 바뀐다.

[status의 상태별 의미]
200 : OK
404 : not found
500 : internal error

---------->> AJAX의 성공적인 데이터 통신이 되려면 readyState 가 4, 그리고 status가 200 이어야 한다.



